// Code generated by MockGen. DO NOT EDIT.
// Source: src/model/service/user_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	rest_err "github.com/Vinicius-Madeira/go-web-app/src/configuration/rest_err"
	model "github.com/Vinicius-Madeira/go-web-app/src/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserDomainService is a mock of UserDomainService interface.
type MockUserDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockUserDomainServiceMockRecorder
}

// MockUserDomainServiceMockRecorder is the mock recorder for MockUserDomainService.
type MockUserDomainServiceMockRecorder struct {
	mock *MockUserDomainService
}

// NewMockUserDomainService creates a new mock instance.
func NewMockUserDomainService(ctrl *gomock.Controller) *MockUserDomainService {
	mock := &MockUserDomainService{ctrl: ctrl}
	mock.recorder = &MockUserDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDomainService) EXPECT() *MockUserDomainServiceMockRecorder {
	return m.recorder
}

// AuthUserServices mocks base method.
func (m *MockUserDomainService) AuthUserServices(userDomain model.UserDomainInterface) (model.UserDomainInterface, string, *rest_err.RestError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUserServices", userDomain)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*rest_err.RestError)
	return ret0, ret1, ret2
}

// AuthUserServices indicates an expected call of AuthUserServices.
func (mr *MockUserDomainServiceMockRecorder) AuthUserServices(userDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUserServices", reflect.TypeOf((*MockUserDomainService)(nil).AuthUserServices), userDomain)
}

// CreateUserServices mocks base method.
func (m *MockUserDomainService) CreateUserServices(domainInterface model.UserDomainInterface) (model.UserDomainInterface, *rest_err.RestError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserServices", domainInterface)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(*rest_err.RestError)
	return ret0, ret1
}

// CreateUserServices indicates an expected call of CreateUserServices.
func (mr *MockUserDomainServiceMockRecorder) CreateUserServices(domainInterface interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserServices", reflect.TypeOf((*MockUserDomainService)(nil).CreateUserServices), domainInterface)
}

// DeleteUserServices mocks base method.
func (m *MockUserDomainService) DeleteUserServices(arg0 string) *rest_err.RestError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserServices", arg0)
	ret0, _ := ret[0].(*rest_err.RestError)
	return ret0
}

// DeleteUserServices indicates an expected call of DeleteUserServices.
func (mr *MockUserDomainServiceMockRecorder) DeleteUserServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserServices", reflect.TypeOf((*MockUserDomainService)(nil).DeleteUserServices), arg0)
}

// FindUserByEmailServices mocks base method.
func (m *MockUserDomainService) FindUserByEmailServices(email string) (model.UserDomainInterface, *rest_err.RestError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmailServices", email)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(*rest_err.RestError)
	return ret0, ret1
}

// FindUserByEmailServices indicates an expected call of FindUserByEmailServices.
func (mr *MockUserDomainServiceMockRecorder) FindUserByEmailServices(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmailServices", reflect.TypeOf((*MockUserDomainService)(nil).FindUserByEmailServices), email)
}

// FindUserByIDServices mocks base method.
func (m *MockUserDomainService) FindUserByIDServices(id string) (model.UserDomainInterface, *rest_err.RestError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByIDServices", id)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(*rest_err.RestError)
	return ret0, ret1
}

// FindUserByIDServices indicates an expected call of FindUserByIDServices.
func (mr *MockUserDomainServiceMockRecorder) FindUserByIDServices(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByIDServices", reflect.TypeOf((*MockUserDomainService)(nil).FindUserByIDServices), id)
}

// UpdateUserServices mocks base method.
func (m *MockUserDomainService) UpdateUserServices(arg0 string, arg1 model.UserDomainInterface) *rest_err.RestError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserServices", arg0, arg1)
	ret0, _ := ret[0].(*rest_err.RestError)
	return ret0
}

// UpdateUserServices indicates an expected call of UpdateUserServices.
func (mr *MockUserDomainServiceMockRecorder) UpdateUserServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserServices", reflect.TypeOf((*MockUserDomainService)(nil).UpdateUserServices), arg0, arg1)
}
